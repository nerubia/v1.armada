service: sitrep

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-pseudo-parameters

provider:
  name: aws
  environment:
    APP_SECRET: ${ssm:APP_SECRET_${self:custom.stage}}
    NODE_ENV: ${self:custom.stage}
    DATABASE_NAME: ${ssm:dbname_${self:custom.stage}}
    DATABASE_PASSWORD: ${ssm:dbpass_${self:custom.stage}}
    DATABASE_PORT: ${ssm:dbport_${self:custom.stage}}
    DATABASE_HOST: ${ssm:dbhost_${self:custom.stage}}
    DATABASE_USER: ${ssm:dbuser_${self:custom.stage}}
  apiName: ${self:custom.project}-${opt:stage, self:provider.stage, 'dev'}
  apiGateway:
    shouldStartNameWithService: true
  runtime: nodejs12.x
  region: ap-southeast-1
  stackName: ${self:custom.project}-${self:service.name}-${self:custom.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameters"
      Resource: "arn:aws:ssm:ap-southeast-1:#{AWS::AccountId}:parameter/*"

custom:
  stage: ${opt:stage, self:provider.stage}
  project: kaishahero

functions:
  sitrep:
    handler: handler.sitrep
    events:
      - http:
          method: get
          cors: true
          path: sitrep
#    vpc:
#      securityGroupIds:
#        - sg-8aaa19ed
#      subnetIds:
#        - subnet-0f5c51f91d972206e

resources:
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.project}-${self:service.name}-${self:custom.stage}-api

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:custom.project}-${self:service.name}-${self:custom.stage}-root-api
